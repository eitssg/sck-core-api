AWSTemplateFormatVersion: '2010-09-09'
Description: 'Core Automation IAM Roles for Infrastructure Provisioning'

Parameters:
  Scope:
    Type: String
    Default: ''
    Description: 'Optional scope prefix for resource naming'
  
  Client:
    Type: String
    Default: 'client'
    Description: 'Client name for resource naming'
  
  AutomationAccountId:
    Type: String
    Description: 'AWS Account ID of the central automation account that will assume these roles'
    AllowedPattern: '[0-9]{12}'
    ConstraintDescription: 'Must be a valid 12-digit AWS Account ID'
  
  IsAutomationAccount:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: 'Set to true if deploying in the automation account itself'

Conditions:
  HasScope: !Not [!Equals [!Ref Scope, '']]
  IsAutomationAccountDeployment: !Equals [!Ref IsAutomationAccount, 'true']
  IsTargetAccountDeployment: !Equals [!Ref IsAutomationAccount, 'false']

Resources:
  # Pipeline Provisioning Role - Full infrastructure provisioning permissions
  PipelineProvisioningRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !If
        - HasScope
        - !Sub '${Scope}${Client}-pipeline-provisioning-role'
        - !Sub '${Client}-pipeline-provisioning-role'
      Description: 'Role for automated infrastructure provisioning and deployment'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: 
                - !If
                  - IsAutomationAccountDeployment
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:root'  # Self-reference in automation account
                  - !Sub 'arn:aws:iam::${AutomationAccountId}:root'  # Cross-account trust
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': !Sub '${Client}-pipeline-external-id'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess  # Almost admin but can't manage IAM users/groups
      Policies:
        - PolicyName: PipelineProvisioningPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # IAM permissions for role/policy management
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:UpdateRole
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:CreatePolicy
                  - iam:DeletePolicy
                  - iam:CreatePolicyVersion
                  - iam:DeletePolicyVersion
                  - iam:SetDefaultPolicyVersion
                  - iam:CreateInstanceProfile
                  - iam:DeleteInstanceProfile
                  - iam:AddRoleToInstanceProfile
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:PassRole
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:ListRolePolicies
                  - iam:ListAttachedRolePolicies
                Resource: '*'
              # CloudFormation stack management
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource: '*'
              # S3 for templates and artifacts
              - Effect: Allow
                Action:
                  - s3:*
                Resource: '*'
              # Systems Manager for configuration
              - Effect: Allow
                Action:
                  - ssm:*
                Resource: '*'
      Tags:
        - Key: Purpose
          Value: CoreAutomationPipelineProvisioning
        - Key: Client
          Value: !Ref Client

  # Core Automation Admin Role - Administrative access to core automation resources
  CoreAutomationAdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: core-automation-admin
      Description: 'Administrative role for Core Automation platform management'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: 
                - !If
                  - IsAutomationAccountDeployment
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                  - !Sub 'arn:aws:iam::${AutomationAccountId}:root'
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CoreAutomationAdminPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Full access to Core Automation resources
              - Effect: Allow
                Action: '*'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:*:${AWS::AccountId}:table/*core-automation*'
                  - !Sub 'arn:aws:s3:::*core-automation*'
                  - !Sub 'arn:aws:s3:::*core-automation*/*'
                  - !Sub 'arn:aws:lambda:*:${AWS::AccountId}:function:*core-*'
                  - !Sub 'arn:aws:states:*:${AWS::AccountId}:stateMachine:*core-*'
                  - !Sub 'arn:aws:ssm:*:${AWS::AccountId}:parameter/core-automation/*'
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*core-*'
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/stepfunctions/*core-*'
              # CloudFormation access for core automation stacks
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource: 
                  - !Sub 'arn:aws:cloudformation:*:${AWS::AccountId}:stack/core-*/*'
                  - !Sub 'arn:aws:cloudformation:*:${AWS::AccountId}:stackset/core-*/*'
              # IAM access for automation roles
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:ListRoles
                  - iam:GetRolePolicy
                  - iam:ListRolePolicies
                  - iam:ListAttachedRolePolicies
                Resource: 
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/*core-*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/*pipeline*'
              # Read access to understand account structure
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                  - sts:AssumeRole
                  - organizations:DescribeAccount
                  - organizations:ListAccounts
                Resource: '*'
      Tags:
        - Key: Purpose
          Value: CoreAutomationAdmin

  # Core Automation Read Role - Read-only access for monitoring and auditing
  CoreAutomationReadRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: core-automation-read
      Description: 'Read-only role for Core Automation platform monitoring'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: 
                - !If
                  - IsAutomationAccountDeployment
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                  - !Sub 'arn:aws:iam::${AutomationAccountId}:root'
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CoreAutomationReadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Read access to Core Automation resources
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                  - dynamodb:ListTables
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - lambda:GetFunction
                  - lambda:ListFunctions
                  - lambda:GetFunctionConfiguration
                  - states:DescribeStateMachine
                  - states:ListStateMachines
                  - states:DescribeExecution
                  - states:ListExecutions
                  - states:GetExecutionHistory
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResources
                  - cloudformation:GetTemplate
                  - cloudformation:ListStacks
                Resource: 
                  - !Sub 'arn:aws:dynamodb:*:${AWS::AccountId}:table/*core-automation*'
                  - !Sub 'arn:aws:s3:::*core-automation*'
                  - !Sub 'arn:aws:s3:::*core-automation*/*'
                  - !Sub 'arn:aws:lambda:*:${AWS::AccountId}:function:*core-*'
                  - !Sub 'arn:aws:states:*:${AWS::AccountId}:stateMachine:*core-*'
                  - !Sub 'arn:aws:states:*:${AWS::AccountId}:execution:*core-*'
                  - !Sub 'arn:aws:ssm:*:${AWS::AccountId}:parameter/core-automation/*'
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*core-*'
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/stepfunctions/*core-*'
                  - !Sub 'arn:aws:cloudformation:*:${AWS::AccountId}:stack/core-*/*'
              # Basic account information
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                  - iam:GetAccountSummary
                Resource: '*'
      Tags:
        - Key: Purpose
          Value: CoreAutomationRead

  # Automation Account Specific Resources (only created in automation account)
  AutomationAccountExecutionRole:
    Type: AWS::IAM::Role
    Condition: IsAutomationAccountDeployment
    Properties:
      RoleName: core-automation-execution-role
      Description: 'Role for executing automation tasks in the automation account'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
                - states.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AutomationAccountExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # STS permissions to assume roles in target accounts
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: 
                  - !Sub 'arn:aws:iam::*:role/*pipeline-provisioning-role'
                  - !Sub 'arn:aws:iam::*:role/core-automation-*'
              # DynamoDB access for tracking and state
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !Sub 'arn:aws:dynamodb:*:${AWS::AccountId}:table/*core-automation*'
              # S3 access for artifacts and templates
              - Effect: Allow
                Action:
                  - s3:*
                Resource: 
                  - !Sub 'arn:aws:s3:::*core-automation*'
                  - !Sub 'arn:aws:s3:::*core-automation*/*'
              # SSM for configuration
              - Effect: Allow
                Action:
                  - ssm:*
                Resource: !Sub 'arn:aws:ssm:*:${AWS::AccountId}:parameter/core-automation/*'
              # Step Functions management
              - Effect: Allow
                Action:
                  - states:*
                Resource: !Sub 'arn:aws:states:*:${AWS::AccountId}:*'

Outputs:
  PipelineProvisioningRoleArn:
    Description: 'ARN of the Pipeline Provisioning Role'
    Value: !GetAtt PipelineProvisioningRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-PipelineProvisioningRoleArn'

  CoreAutomationAdminRoleArn:
    Description: 'ARN of the Core Automation Admin Role'
    Value: !GetAtt CoreAutomationAdminRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CoreAutomationAdminRoleArn'

  CoreAutomationReadRoleArn:
    Description: 'ARN of the Core Automation Read Role'
    Value: !GetAtt CoreAutomationReadRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CoreAutomationReadRoleArn'

  AutomationAccountExecutionRoleArn:
    Condition: IsAutomationAccountDeployment
    Description: 'ARN of the Automation Account Execution Role'
    Value: !GetAtt AutomationAccountExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AutomationAccountExecutionRoleArn'

  ExternalId:
    Description: 'External ID for role assumption security'
    Value: !Sub '${Client}-pipeline-external-id'
    Export:
      Name: !Sub '${AWS::StackName}-ExternalId'