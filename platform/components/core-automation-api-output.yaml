AWSTemplateFormatVersion: '2010-09-09'
Description: AWS::DynamoDB::Table - core-automation-api-app - resources

Parameters:
  Scope:
    Type: String
    Default: ""

Resources:
  DummyResource:
    Type: AWS::CloudFormation::WaitConditionHandle
    DeletionPolicy: Delete
    Metadata:
      Build: latest

  # S3 Buckets

  # Single bucket for both files and artifacts
  FilesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: core-automation-ap-southeast-1
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: OptimizeStorageCosts
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
              - TransitionInDays: 180
                StorageClass: DEEP_ARCHIVE
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionTransitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
            NoncurrentVersionExpiration:
              NoncurrentDays: 365
      Tags:
        - Key: Name
          Value: core-automation-ap-southeast-1
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest
        - Key: Purpose
          Value: "Files and Artifacts Storage"
        - Key: CostOptimization
          Value: "IA after 30 days, Glacier after 90 days"
        - Key: Region
          Value: ap-southeast-1
        - Key: Compliance
          Value: "Encrypted-at-rest-and-in-transit"

  FilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FilesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !GetAtt FilesBucket.Arn
              - !Sub "${FilesBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
          - Sid: EnforceEncryptionInTransit
            Effect: Deny
            Principal: "*"
            Action: "s3:PutObject"
            Resource: !Sub "${FilesBucket.Arn}/*"
            Condition:
              StringNotEquals:
                "s3:x-amz-server-side-encryption": "AES256"
          - Sid: AllowAutomationApiAccess
            Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Scope}CoreAutomationApiReadRole"
                - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Scope}CoreAutomationApiWriteRole"
                - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:user/${Scope}core-simple-cloud-kit-api-server"
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
              - "s3:ListBucket"
              - "s3:GetBucketLocation"
              - "s3:GetObjectVersion"
              - "s3:PutObjectAcl"
              - "s3:GetObjectAcl"
              - "s3:AbortMultipartUpload"
              - "s3:ListMultipartUploadParts"
            Resource:
              - !GetAtt FilesBucket.Arn
              - !Sub "${FilesBucket.Arn}/*"



  # DynamoDB Tables (existing content)
  ItemsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: parent_prn
          AttributeType: S
        - AttributeName: prn
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: parent_prn
          KeyType: HASH
        - AttributeName: prn
          KeyType: RANGE
      TableName:
        Fn::Sub: "${Scope}core-automation-items"
      StreamSpecification:
        StreamViewType: OLD_IMAGE
      GlobalSecondaryIndexes:
        - IndexName: parent-created_at-index
          KeySchema:
            - AttributeName: parent_prn
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-items"
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  EventsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: parent_prn
          AttributeType: S
        - AttributeName: prn
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: parent_prn
          KeyType: HASH
        - AttributeName: prn
          KeyType: RANGE
      TableName:
        Fn::Sub: "${Scope}core-automation-events"
      StreamSpecification:
        StreamViewType: OLD_IMAGE
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-events"
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ProfilesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: ProfileName
          AttributeType: S
        - AttributeName: Email
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: ProfileName
          KeyType: RANGE
      TableName:
        Fn::Sub: "${Scope}core-automation-profiles"
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: Email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-profiles"
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  OAuthTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: Code
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: Code
          KeyType: HASH
      TableName:
        Fn::Sub: "${Scope}core-automation-oauth"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-oauth"
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  AppsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: Portfolio
          AttributeType: S
        - AttributeName: AppRegex
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: Portfolio
          KeyType: HASH
        - AttributeName: AppRegex
          KeyType: RANGE
      TableName:
        Fn::Sub: "${Scope}core-automation-apps"
      StreamSpecification:
        StreamViewType: OLD_IMAGE
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-apps"
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ClientsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: Client
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: Client
          KeyType: HASH
      TableName:
        Fn::Sub: "${Scope}core-automation-clients"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-clients"
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  PortfoliosTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: Portfolio
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: Portfolio
          KeyType: HASH
      TableName:
        Fn::Sub: "${Scope}core-automation-portfolios"
      StreamSpecification:
        StreamViewType: OLD_IMAGE
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-portfolios"
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ZonesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: Zone
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: Zone
          KeyType: HASH
      TableName:
        Fn::Sub: "${Scope}core-automation-zones"
      StreamSpecification:
        StreamViewType: OLD_IMAGE
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-zones"
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ChangePortfoliosLogGroup:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${Scope}core-automation-change-portfolios-lambda"
      RetentionInDays: 1
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-change-portfolios-lambda"
        - Key: Scope
          Value: !Ref Scope
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ChangeAppsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${Scope}core-automation-change-apps-lambda"
      RetentionInDays: 1
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-change-apps-lambda"
        - Key: Scope
          Value: !Ref Scope
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ChangeZonesLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${Scope}core-automation-change-zones-lambda"
      RetentionInDays: 1
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-change-zones-lambda"
        - Key: Scope
          Value: !Ref Scope
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  FactsLambdaExecutionRole:
    Type: AWS::IAM::Role
    DependsOn:
      - ChangePortfoliosLogGroup
      - ChangeAppsLogGroup
      - ChangeZonesLogGroup
    Properties:
      RoleName:
        Fn::Sub: "${Scope}CoreAutomationFactsLambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBStreamPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:DeleteItem
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource:
                  - Fn::GetAtt:
                      - PortfoliosTable
                      - Arn
                  - Fn::GetAtt:
                      - AppsTable
                      - Arn
                  - Fn::GetAtt:
                      - ZonesTable
                      - Arn
                  - Fn::GetAtt:
                      - ItemsTable
                      - Arn
                  - Fn::GetAtt:
                      - PortfoliosTable
                      - StreamArn
                  - Fn::GetAtt:
                      - AppsTable
                      - StreamArn
                  - Fn::GetAtt:
                      - ZonesTable
                      - StreamArn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Scope}core-automation-change-portfolios-lambda:*'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Scope}core-automation-change-apps-lambda:*'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Scope}core-automation-change-zones-lambda:*'
      Path: /
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}CoreAutomationFactsLambdaExecutionRole"
        - Key: Scope
          Value: !Ref Scope
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ChangePortfoliosLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - ChangePortfoliosLogGroup
    Properties:
      FunctionName:
        Fn::Sub: "${Scope}core-automation-change-portfolios-lambda"
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - FactsLambdaExecutionRole
          - Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from boto3.dynamodb.conditions import Key, Attr


          def handler(event, context):
              """
              Handles portfolio deletion events and cascades to apps and items tables.
              When a portfolio is deleted:
              1. Delete all apps where Portfolio = portfolio_name
              2. Delete all items where prn starts with "prn:portfolio_name"
              """
              dynamodb = boto3.resource("dynamodb")

              apps_table = dynamodb.Table(os.environ["APPS_TABLE"])
              items_table = dynamodb.Table(os.environ["ITEMS_TABLE"])

              log_level = os.environ.get("LOG_LEVEL", "ERROR").upper()

              try:
                  total_count = 0

                  for record in event["Records"]:
                      if record["eventName"] == "REMOVE":
                          # Get the deleted portfolio name from the hash key
                          portfolio_name = record["dynamodb"]["OldImage"]["Portfolio"]["S"]

                          if log_level == "INFO":
                              print(f"Processing deletion of portfolio: {portfolio_name}")

                          # 1. Delete all apps where Portfolio = portfolio_name
                          apps_deleted = 0
                          try:
                              response = apps_table.query(KeyConditionExpression=Key("Portfolio").eq(portfolio_name))

                              for app_item in response["Items"]:
                                  app_regex = app_item["AppRegex"]
                                  apps_table.delete_item(Key={"Portfolio": portfolio_name, "AppRegex": app_regex})
                                  apps_deleted += 1
                                  if log_level == "INFO":
                                      print(f"SUCCESS: App [{portfolio_name}:{app_regex}] deleted")

                              if log_level == "INFO":
                                  print(f"Deleted {apps_deleted} apps for portfolio {portfolio_name}")

                          except Exception as e:
                              print(f"ERROR deleting apps for portfolio {portfolio_name}: {str(e)}")

                          # 2. Delete items where prn starts with "prn:{portfolio_name}"
                          items_deleted = 0
                          try:
                              portfolio_prn_prefix = f"prn:{portfolio_name}"

                              # Scan to find all items that belong to this portfolio
                              response = items_table.scan(FilterExpression=Attr("prn").begins_with(portfolio_prn_prefix))

                              for item in response["Items"]:
                                  parent_prn = item["parent_prn"]
                                  prn = item["prn"]

                                  items_table.delete_item(Key={"parent_prn": parent_prn, "prn": prn})
                                  items_deleted += 1
                                  if log_level == "INFO":
                                      print(f"SUCCESS: Item [{prn}] deleted")

                              if log_level == "INFO":
                                  print(f"Deleted {items_deleted} items for portfolio {portfolio_name}")

                          except Exception as e:
                              print(f"ERROR deleting items for portfolio {portfolio_name}: {str(e)}")

                          total_count += 1 + apps_deleted + items_deleted

                          if log_level == "INFO":
                              print(
                                  f"SUCCESS: Portfolio [{portfolio_name}] cascading delete completed - {apps_deleted} apps, {items_deleted} items"
                              )

                  print(f"SUCCESS: {total_count} total records deleted")
                  return {
                      "statusCode": 200,
                      "body": json.dumps(f"Success: {total_count} records deleted"),
                  }

              except Exception as e:
                  print(f"ERROR: {str(e)}")
                  return {"statusCode": 500, "body": json.dumps(f"Error: {str(e)}")}

      Runtime: python3.12
      Timeout: 900
      Environment:
        Variables:
          APPS_TABLE:
            Fn::Sub: "${Scope}core-automation-apps"
          ITEMS_TABLE:
            Fn::Sub: "${Scope}core-automation-items"
          LOG_LEVEL: INFO
      LoggingConfig:
        LogGroup:
          Fn::Sub: "/aws/lambda/${Scope}core-automation-change-portfolios-lambda"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-change-portfolios-lambda"
        - Key: Scope
          Value: !Ref Scope
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ChangeAppsLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - ChangeAppsLogGroup
    Properties:
      FunctionName:
        Fn::Sub: "${Scope}core-automation-change-apps-lambda"
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - FactsLambdaExecutionRole
          - Arn
      Code:
        ZipFile: |
          import json


          def handler(event, context):
              """
              Handles app deletion events. Just logs - no cascading needed.
              Apps are isolated per tenant, so no cross-table cleanup required.
              """
              log_level = os.environ.get("LOG_LEVEL", "ERROR").upper()

              try:
                  count = 0
                  for record in event["Records"]:
                      if record["eventName"] == "REMOVE":
                          portfolio = record["dynamodb"]["OldImage"]["Portfolio"]["S"]
                          app_regex = record["dynamodb"]["OldImage"]["AppRegex"]["S"]

                          count += 1
                          if log_level == "INFO":
                              print(f"SUCCESS: App [{portfolio}:{app_regex}] deleted")

                  print(f"SUCCESS: {count} apps deleted")
                  return {
                      "statusCode": 200,
                      "body": json.dumps(f"Success: {count} apps deleted"),
                  }
              except Exception as e:
                  print(f"ERROR: {str(e)}")
                  return {"statusCode": 500, "body": json.dumps(f"Error: {str(e)}")}

      Runtime: python3.12
      Timeout: 30
      Environment:
        Variables:
          LOG_LEVEL: INFO
      LoggingConfig:
        LogGroup:
          Fn::Sub: "/aws/lambda/${Scope}core-automation-change-apps-lambda"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-change-apps-lambda"
        - Key: Scope
          Value: !Ref Scope
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ChangeZonesLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - ChangeZonesLogGroup
    Properties:
      FunctionName:
        Fn::Sub: "${Scope}core-automation-change-zones-lambda"
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - FactsLambdaExecutionRole
          - Arn
      Runtime: python3.12
      Code:
        ZipFile: |
          import json


          def handler(event, context):
              """
              Handles zone deletion events. Just logs - no cascading needed.
              With tenant isolation, zones don't have dependent resources to clean up.
              """
              log_level = os.environ.get("LOG_LEVEL", "ERROR").upper()

              try:
                  count = 0
                  for record in event["Records"]:
                      if record["eventName"] == "REMOVE":
                          zone = record["dynamodb"]["OldImage"]["Zone"]["S"]

                          count += 1
                          if log_level == "INFO":
                              print(f"SUCCESS: Zone [{zone}] deleted")

                  print(f"SUCCESS: {count} zones deleted")
                  return {
                      "statusCode": 200,
                      "body": json.dumps(f"Success: {count} zones deleted"),
                  }
              except Exception as e:
                  print(f"ERROR: {str(e)}")
                  return {"statusCode": 500, "body": json.dumps(f"Error: {str(e)}")}

      Timeout: 30
      Environment:
        Variables:
          LOG_LEVEL: INFO
      LoggingConfig:
        LogGroup:
          Fn::Sub: "/aws/lambda/${Scope}core-automation-change-zones-lambda"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-change-zones-lambda"
        - Key: Scope
          Value: !Ref Scope
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  PortfoliosTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      EventSourceArn:
        Fn::GetAtt:
          - PortfoliosTable
          - StreamArn
      FunctionName:
        Fn::GetAtt:
          - ChangePortfoliosLambda
          - Arn
      StartingPosition: LATEST

  AppsTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      EventSourceArn:
        Fn::GetAtt:
          - AppsTable
          - StreamArn
      FunctionName:
        Fn::GetAtt:
          - ChangeAppsLambda
          - Arn
      StartingPosition: LATEST

  ZonesTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      EventSourceArn:
        Fn::GetAtt:
          - ZonesTable
          - StreamArn
      FunctionName:
        Fn::GetAtt:
          - ChangeZonesLambda
          - Arn
      StartingPosition: LATEST

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    DependsOn: ChangeEventsLogGroup
    Properties:
      RoleName:
        Fn::Sub: "${Scope}core-automation-api-lambda-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBStreamPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:DeleteItem
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource:
                  - Fn::GetAtt:
                      - ItemsTable
                      - Arn
                  - Fn::GetAtt:
                      - ItemsTable
                      - StreamArn
                  - Fn::GetAtt:
                      - EventsTable
                      - Arn
                  - Fn::GetAtt:
                      - EventsTable
                      - StreamArn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Scope}core-automation-change-events-lambda:*'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Scope}core-automation-change-items-lambda:*'
      Path: /
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-api-lambda-execution-role"
        - Key: Scope
          Value: !Ref Scope
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ChangeEventsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${Scope}core-automation-change-events-lambda"
      RetentionInDays: 1
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-change-events-lambda-log-group"
        - Key: Scope
          Value: !Ref Scope
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ChangeItemsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: '/aws/lambda/${Scope}core-automation-change-items-lambda'
      RetentionInDays: 1
      Tags:
        - Key: Name
          Value:
            Fn::Sub: '${Scope}core-automation-change-items-lambda-log-group'
        - Key: Scope
          Value: !Ref Scope
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ChangeItemsLambda:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    DependsOn:
      - ChangeItemsLogGroup
    Properties:
      FunctionName:
        Fn::Sub: "${Scope}core-automation-change-items-lambda"
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from boto3.dynamodb.conditions import Key


          def handler(event, context):
              """
              Handles item deletion events and cascades to events table.
              When an item is deleted, all events for that item should be deleted.
              """
              dynamodb = boto3.resource("dynamodb")
              events_table = dynamodb.Table(os.environ["EVENTS_TABLE"])

              log_level = os.environ.get("LOG_LEVEL", "ERROR").upper()
              log_all_delete_events = os.environ.get("LOG_ALL_DELETE_EVENTS", "false").lower() == "true"

              try:
                  total_count = 0

                  for record in event["Records"]:
                      if record["eventName"] == "REMOVE":
                          # Get the deleted item's PRN
                          item_prn = record["dynamodb"]["OldImage"]["prn"]["S"]

                          if log_level == "INFO":
                              print(f"Processing deletion of item: {item_prn}")

                          # Delete all events for this item (where parent_prn = item_prn)
                          events_deleted = 0
                          try:
                              response = events_table.query(KeyConditionExpression=Key("parent_prn").eq(item_prn))

                              for event_item in response["Items"]:
                                  event_prn = event_item["prn"]
                                  events_table.delete_item(Key={"parent_prn": item_prn, "prn": event_prn})
                                  events_deleted += 1
                                  if log_level == "INFO" or log_all_delete_events:
                                      print(f"SUCCESS: Event [{event_prn}] deleted")

                              if log_level == "INFO":
                                  print(f"Deleted {events_deleted} events for item {item_prn}")

                          except Exception as e:
                              print(f"ERROR deleting events for item {item_prn}: {str(e)}")

                          total_count += 1 + events_deleted

                          if log_level == "INFO":
                              print(f"SUCCESS: Item [{item_prn}] cascading delete completed - {events_deleted} events")

                  print(f"SUCCESS: {total_count} total records deleted")
                  return {
                      "statusCode": 200,
                      "body": json.dumps(f"Success: {total_count} records deleted"),
                  }

              except Exception as e:
                  print(f"ERROR: {str(e)}")
                  return {"statusCode": 500, "body": json.dumps(f"Error: {str(e)}")}

      Runtime: python3.12
      Environment:
        Variables:
          EVENTS_TABLE:
            Fn::Sub: "${Scope}core-automation-events"
          LOG_LEVEL: INFO
          LOG_ALL_DELETE_EVENTS: 'true'
      LoggingConfig:
        LogGroup:
          Fn::Sub: "/aws/lambda/${Scope}core-automation-change-items-lambda"
        LogFormat: Text
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-change-items-lambda"
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ChangeEventsLambda:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    DependsOn:
      - ChangeEventsLogGroup
    Properties:
      FunctionName:
        Fn::Sub: "${Scope}core-automation-change-events-lambda"
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Code:
        ZipFile: |
          import json


          def handler(event, context):
              """
              Handles event deletion. Just logs - no cascading needed.
              Events are leaf nodes in the hierarchy.
              """
              log_level = os.environ.get("LOG_LEVEL", "ERROR").upper()

              try:
                  count = 0
                  for record in event["Records"]:
                      if record["eventName"] == "REMOVE":
                          event_prn = record["dynamodb"]["OldImage"]["prn"]["S"]
                          parent_prn = record["dynamodb"]["OldImage"]["parent_prn"]["S"]

                          count += 1
                          if log_level == "INFO":
                              print(f"SUCCESS: Event [{event_prn}] (parent: {parent_prn}) deleted")

                  print(f"SUCCESS: {count} events deleted")
                  return {
                      "statusCode": 200,
                      "body": json.dumps(f"Success: {count} events deleted"),
                  }
              except Exception as e:
                  print(f"ERROR: {str(e)}")
                  return {"statusCode": 500, "body": json.dumps(f"Error: {str(e)}")}

      Runtime: python3.12
      Environment:
        Variables:
          LOG_LEVEL: INFO
      LoggingConfig:
        LogGroup:
          Fn::Sub: "/aws/lambda/${Scope}core-automation-change-events-lambda"
        LogFormat: Text
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${Scope}core-automation-change-events-lambda"
        - Key: Client
          Value: core
        - Key: Environment
          Value: prod
        - Key: Portfolio
          Value: core-automation
        - Key: App
          Value: api
        - Key: Branch
          Value: main
        - Key: Build
          Value: latest

  ItemsTableStream:
    Type: AWS::Lambda::EventSourceMapping
    DeletionPolicy: Delete
    Properties:
      BatchSize: 100
      EventSourceArn:
        Fn::GetAtt:
          - ItemsTable
          - StreamArn
      FunctionName:
        Fn::GetAtt:
          - ChangeItemsLambda
          - Arn
      StartingPosition: LATEST

  EventsTableStream:
    Type: AWS::Lambda::EventSourceMapping
    DeletionPolicy: Delete
    Properties:
      BatchSize: 100
      EventSourceArn:
        Fn::GetAtt:
          - EventsTable
          - StreamArn
      FunctionName:
        Fn::GetAtt:
          - ChangeEventsLambda
          - Arn
      StartingPosition: LATEST

Outputs:
  # S3 Bucket Outputs

  # Same bucket - output both sets with same values
  FilesBucketName:
    Description: "Name of the Files bucket"
    Value: !Ref FilesBucket
    Export:
      Name: "CoreAutomationFilesBucketName"
  
  FilesBucketArn:
    Description: "ARN of the Files bucket"
    Value: !GetAtt FilesBucket.Arn
    Export:
      Name: "CoreAutomationFilesBucketArn"
  
  FilesBucketDomainName:
    Description: "Domain name of the Files bucket"
    Value: !GetAtt FilesBucket.DomainName
    Export:
      Name: "CoreAutomationFilesBucketDomainName"
  
  ArtefactsBucketName:
    Description: "Name of the Artifacts bucket (same as Files bucket)"
    Value: !Ref FilesBucket
    Export:
      Name: "CoreAutomationArtefactsBucketName"
  
  ArtefactsBucketArn:
    Description: "ARN of the Artifacts bucket (same as Files bucket)"
    Value: !GetAtt FilesBucket.Arn
    Export:
      Name: "CoreAutomationArtefactsBucketArn"
  
  ArtefactsBucketDomainName:
    Description: "Domain name of the Artifacts bucket (same as Files bucket)"
    Value: !GetAtt FilesBucket.DomainName
    Export:
      Name: "CoreAutomationArtefactsBucketDomainName"


  # DynamoDB Table Outputs (existing)
  ItemsTableArn:
    Value:
      Fn::GetAtt:
        - ItemsTable
        - Arn
    Export:
      Name: "CoreAutomationItemsTableArn"
  ItemsTableName:
    Value:
      Fn::Sub: "${Scope}core-automation-items"
    Export:
      Name: "CoreAutomationItemsTableName"
  EventsTableArn:
    Value:
      Fn::GetAtt:
        - EventsTable
        - Arn
    Export:
      Name: "CoreAutomationEventsTableArn"
  EventsTableName:
    Value:
      Fn::Sub: "${Scope}core-automation-events"
    Export:
      Name: "CoreAutomationEventsTableName"
  ProfilesTableArn:
    Value:
      Fn::GetAtt:
        - ProfilesTable
        - Arn
    Export:
      Name: "CoreAutomationProfilesTableArn"
  ProfilesTableName:
    Value:
      Fn::Sub: "${Scope}core-automation-profiles"
    Export:
      Name: "CoreAutomationProfilesTableName"
  OAuthTableArn:
    Value:
      Fn::GetAtt:
        - OAuthTable
        - Arn
    Export:
      Name: "CoreAutomationOAuthTableArn"
  OAuthTableName:
    Value:
      Fn::Sub: "${Scope}core-automation-oauth"
    Export:
      Name: "CoreAutomationOAuthTableName"
  AppsTableArn:
    Value:
      Fn::GetAtt:
        - AppsTable
        - Arn
    Export:
      Name: "CoreAutomationAppsTableArn"
  AppsTableName:
    Value:
      Fn::Sub: "${Scope}core-automation-apps"
    Export:
      Name: "CoreAutomationAppsTableName"
  ClientsTableArn:
    Value:
      Fn::GetAtt:
        - ClientsTable
        - Arn
    Export:
      Name: "CoreAutomationClientsTableArn"
  ClientsTableName:
    Value:
      Fn::Sub: "${Scope}core-automation-clients"
    Export:
      Name: "CoreAutomationClientsTableName"
  PortfoliosTableArn:
    Value:
      Fn::GetAtt:
        - PortfoliosTable
        - Arn
    Export:
      Name: "CoreAutomationPortfoliosTableArn"
  PortfoliosTableName:
    Value:
      Fn::Sub: "${Scope}core-automation-portfolios"
    Export:
      Name: "CoreAutomationPortfoliosTableName"
  ZonesTableArn:
    Value:
      Fn::GetAtt:
        - ZonesTable
        - Arn
    Export:
      Name: "CoreAutomationZonesTableArn"
  ZonesTableName:
    Value:
      Fn::Sub: "${Scope}core-automation-zones"
    Export:
      Name: "CoreAutomationZonesTableName"